{"version":3,"sources":["main/core.cljs"],"mappings":"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","names":["js/main","js/main.core","js/main.core.state","main.core/state","reagent.core.atom","main.core/point-r","p__26774","map__26775","cljs.core/--destructure-map","cljs.core.get","main.core/draw-point","ctx","x","y","highlighted?","control?","G__26776","js/Math.PI","main.core/draw-canvas","map__26777","cljs.core/deref","vec__26778","cljs.core.nth","arc","start","control1","control2","end","G__26781","main.core/main-view","main.core/->xy","canvas-rect","event","main.core/in-vicinity?","v","js/Math.abs","main.core/move-point","path","point","cljs.core.get_in","diff-x","diff-y","complementary-path","cljs.core._EQ_","complementary-point","p1__26782#","cljs.core.swap_BANG_","cljs.core/update-in","cljs.core.merge","cljs.core/assoc-in","main.core/on-mousedown","vec__26783","map__26786","point-path","hit","cljs.core.reduce","p__26787","map__26788","cljs.core/reduced","cljs.core.prn","cljs.core/assoc","main.core/on-mousemove","temp__5753__auto__","vec__26789","main.core/on-mouseup","cljs.core/dissoc","main.core/setup-canvas","canvas-element","js/document.getElementById","dpr","or__4253__auto__","js/window.devicePixelRatio","cljs.core.partial","main.core/start","reagent.dom.render","main.core/run"],"sourcesContent":["(ns main.core\n  (:require\n    [reagent.core :as r]\n    [reagent.dom :as rdom]\n    [clojure.string :as str]))\n\n(defonce state\n  (r/atom\n    {:arc [{:x 65, :y 130.5625, :highlighted? false}\n           {:x 226, :y 321.5625, :highlighted? false :control? true}\n           {:x 682, :y 63.5625, :highlighted? false :control? true}\n           {:x 844, :y 245.5625, :highlighted? false}]\n     :ctx nil}))\n\n(def point-r 5)\n\n;; :on-change #(reset! time-color (-> % .-target .-value))}]])\n\n(defn draw-point [ctx {:keys [x y highlighted? control?]}]\n  (doto ctx\n    (.beginPath)\n    (-> (.-strokeStyle) (set! (cond\n                                highlighted? \"rgb(241 102 102)\"\n                                control? \"#ccc\"\n                                :else \"#222\")))\n    (-> (.-lineWidth) (set! 2))\n    (.arc x y point-r 0 (* 2 js/Math.PI) false)\n    (-> (.-fillStyle) (set! \"#eee\"))\n    (.fill)\n    (.stroke)))\n\n(defn draw-canvas []\n  (let [{:keys [arc ctx]} @state\n        [start control1 control2 end] arc]\n    (when ctx\n      (doto ctx\n        (.clearRect 0 0 (.-width (.-canvas ctx)) (.-height (.-canvas ctx)))\n\n        (-> (.-strokeStyle) (set! \"#ccc\"))\n        (-> (.-lineWidth) (set! 1))\n        (.beginPath)\n        (.moveTo (:x start) (:y start))\n        (.lineTo (:x control1) (:y control1))\n        (.stroke)\n        (.beginPath)\n        (.moveTo (:x end) (:y end))\n        (.lineTo (:x control2) (:y control2))\n        (.stroke)\n\n        (-> (.-strokeStyle) (set! \"#222\"))\n        (-> (.-lineWidth) (set! 3))\n        (.beginPath)\n        (.moveTo (:x start) (:y start))\n        (.bezierCurveTo (:x control1) (:y control1)\n                        (:x control2) (:y control2)\n                        (:x end) (:y end))\n        (.stroke)\n\n        (draw-point control1)\n        (draw-point control2)\n        (draw-point start)\n        (draw-point end)))\n    nil))\n\n(defn main-view []\n  [:div {:style {:width :900px}}\n   [:div {:style {:border-bottom \"5px solid #222\"\n                  :margin-bottom :10px}}\n    [:h1 {:style {:color :#222\n                  :margin-bottom :5px}}\n     \"Arcs\"]]\n   [draw-canvas]\n   ;; [:p {:style {:color \"#777\"}}\n   ;;  (pr-str (map #(select-keys % [:x :y]) (:arc @state)))]\n   ])\n\n(defn ->xy [canvas-rect event]\n  (let [x (- (.-clientX event) (.-left canvas-rect))\n        y (- (.-clientY event) (.-top canvas-rect))]\n    [x y]))\n\n(defn in-vicinity? [v]\n  (<= (js/Math.abs v) point-r))\n\n(defn move-point [path x y]\n  (let [point (get-in @state [:arc path])\n        diff-x (- (:x point) x)\n        diff-y (- (:y point) y)\n        complementary-path (cond\n                             (= 0 path)\n                             1\n\n                             (= 3 path)\n                             2)\n        complementary-point (when complementary-path\n                              (get-in @state [:arc complementary-path]))]\n    (swap! state update-in [:arc path] #(merge % {:x x :y y :highlighted? true}))\n    (when complementary-path\n      (swap! state assoc-in\n             [:arc complementary-path]\n             {:x (- (:x complementary-point) diff-x)\n              :y (- (:y complementary-point) diff-y)}))))\n\n(defn on-mousedown [canvas-rect event]\n  (let [[x y] (->xy canvas-rect event)\n        {point-path :path hit :hit}\n        (reduce\n          (fn [{:keys [path]} point]\n            (if (and (in-vicinity? (- x (:x point)))\n                     (in-vicinity? (- y (:y point))))\n              (reduced {:path path :hit true})\n              {:path (inc path)}))\n          {:path 0}\n          (:arc @state))]\n    (prn :x x :y y)\n    (when hit\n      (move-point point-path x y)\n      (swap! state assoc :dragging-path point-path))))\n\n(defn on-mousemove [canvas-rect event]\n  (when-let [path (:dragging-path @state)]\n    (let [[x y] (->xy canvas-rect event)]\n      (move-point path x y))))\n\n(defn on-mouseup [canvas-rect event]\n  (when-let [path (:dragging-path @state)]\n    (swap! state assoc-in [:arc path :highlighted?] false)\n    (swap! state dissoc :dragging-path)))\n\n(defn setup-canvas []\n  (let [canvas-element (js/document.getElementById \"canvas\")\n        dpr (or js/window.devicePixelRatio 1)\n        canvas-rect (.getBoundingClientRect canvas-element)]\n    (set! (.-width canvas-element) (* dpr (.-width canvas-rect)))\n    (set! (.-height canvas-element) (* dpr (.-height canvas-rect)))\n\n    (.addEventListener canvas-element \"mousedown\" (partial on-mousedown canvas-rect))\n    (.addEventListener canvas-element \"mousemove\" (partial on-mousemove canvas-rect))\n    (.addEventListener canvas-element \"mouseup\" (partial on-mouseup canvas-rect))\n\n    (swap! state assoc :ctx (.getContext canvas-element \"2d\"))))\n\n(defn ^:dev/after-load start []\n  (rdom/render [main-view] (js/document.getElementById \"root\"))\n  (when-not (:ctx @state)\n    (setup-canvas)))\n\n(defn ^:export run []\n  (start))\n\n(run)\n"]}
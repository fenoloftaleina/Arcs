{"version":3,"sources":["main/core.cljs"],"mappings":"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","names":["js/main","js/main.core","js/main.core.state","main.core/state","reagent.core.atom","main.core/point-r","p__30306","map__30307","cljs.core/--destructure-map","cljs.core.get","main.core/draw-point","ctx","x","y","highlighted?","G__30308","js/Math.PI","main.core/draw-canvas","map__30309","cljs.core/deref","vec__30310","cljs.core.nth","arc","start","control1","control2","end","G__30313","main.core/main-view","main.core/->xy","canvas-rect","event","main.core/in-vicinity?","v","js/Math.abs","main.core/move-point","path","point","cljs.core.get_in","diff-x","diff-y","complementary-path","cljs.core._EQ_","complementary-point","cljs.core.swap_BANG_","cljs.core/assoc-in","main.core/on-mousedown","vec__30314","map__30317","point-path","hit","cljs.core.reduce","p__30318","map__30319","cljs.core/reduced","cljs.core.prn","cljs.core/assoc","main.core/on-mousemove","temp__5753__auto__","vec__30320","main.core/on-mouseup","cljs.core/dissoc","main.core/setup-canvas","canvas-element","js/document.getElementById","dpr","or__4253__auto__","js/window.devicePixelRatio","cljs.core.partial","main.core/start","reagent.dom.render","main.core/run"],"sourcesContent":["(ns main.core\n  (:require\n    [reagent.core :as r]\n    [reagent.dom :as rdom]\n    [clojure.string :as str]))\n\n(defonce state\n  (r/atom\n    {:arc [{:x 65, :y 130.5625, :highlighted? false}\n           {:x 226, :y 321.5625, :highlighted? false}\n           {:x 682, :y 63.5625, :highlighted? false}\n           {:x 844, :y 245.5625, :highlighted? false}]\n     :ctx nil}))\n\n(def point-r 5)\n\n;; :on-change #(reset! time-color (-> % .-target .-value))}]])\n\n(defn draw-point [ctx {:keys [x y highlighted?]}]\n  (doto ctx\n    (.beginPath)\n    (-> (.-strokeStyle) (set! (if highlighted? \"rgb(241 102 102)\" \"#ccc\")))\n    (-> (.-lineWidth) (set! 2))\n    (.arc x y point-r 0 (* 2 js/Math.PI) false)\n    (-> (.-fillStyle) (set! \"#eee\"))\n    (.fill)\n    (.stroke)))\n\n(defn draw-canvas []\n  (let [{:keys [arc ctx]} @state\n        [start control1 control2 end] arc]\n    (when ctx\n      (doto ctx\n        (.clearRect 0 0 (.-width (.-canvas ctx)) (.-height (.-canvas ctx)))\n        (-> (.-strokeStyle) (set! \"#222\"))\n        (-> (.-lineWidth) (set! 3))\n        (.beginPath)\n        (.moveTo (:x start) (:y start))\n        (.bezierCurveTo (:x control1) (:y control1)\n                        (:x control2) (:y control2)\n                        (:x end) (:y end))\n        (.stroke)\n        (-> (.-strokeStyle) (set! \"#ccc\"))\n        (-> (.-lineWidth) (set! 1))\n        (.beginPath)\n        (.moveTo (:x start) (:y start))\n        (.lineTo (:x control1) (:y control1))\n        (.stroke)\n        (.beginPath)\n        (.moveTo (:x end) (:y end))\n        (.lineTo (:x control2) (:y control2))\n        (.stroke)\n        (draw-point control1)\n        (draw-point control2)\n        (draw-point start)\n        (draw-point end)))\n    nil))\n\n(defn main-view []\n  [:div {:style {:width :900px}}\n   [:div {:style {:border-bottom \"5px solid #222\"\n                  :margin-bottom :10px}}\n    [:h1 {:style {:color :#222\n                  :margin-bottom :5px}}\n     \"Arcs\"]]\n   [draw-canvas]\n   ;; [:p {:style {:color \"#777\"}}\n   ;;  (pr-str (map #(select-keys % [:x :y]) (:arc @state)))]\n   ])\n\n(defn ->xy [canvas-rect event]\n  (let [x (- (.-clientX event) (.-left canvas-rect))\n        y (- (.-clientY event) (.-top canvas-rect))]\n    [x y]))\n\n(defn in-vicinity? [v]\n  (<= (js/Math.abs v) point-r))\n\n(defn move-point [path x y]\n  (let [point (get-in @state [:arc path])\n        diff-x (- (:x point) x)\n        diff-y (- (:y point) y)\n        complementary-path (cond\n                             (= 0 path)\n                             1\n\n                             (= 3 path)\n                             2)\n        complementary-point (when complementary-path\n                              (get-in @state [:arc complementary-path]))]\n    (swap! state assoc-in [:arc path] {:x x :y y :highlighted? true})\n    (when complementary-path\n      (swap! state assoc-in\n             [:arc complementary-path]\n             {:x (- (:x complementary-point) diff-x)\n              :y (- (:y complementary-point) diff-y)}))))\n\n(defn on-mousedown [canvas-rect event]\n  (let [[x y] (->xy canvas-rect event)\n        {point-path :path hit :hit}\n        (reduce\n          (fn [{:keys [path]} point]\n            (if (and (in-vicinity? (- x (:x point)))\n                     (in-vicinity? (- y (:y point))))\n              (reduced {:path path :hit true})\n              {:path (inc path)}))\n          {:path 0}\n          (:arc @state))]\n    (prn :x x :y y)\n    (when hit\n      (move-point point-path x y)\n      (swap! state assoc :dragging-path point-path))))\n\n(defn on-mousemove [canvas-rect event]\n  (when-let [path (:dragging-path @state)]\n    (let [[x y] (->xy canvas-rect event)]\n      (move-point path x y))))\n\n(defn on-mouseup [canvas-rect event]\n  (when-let [path (:dragging-path @state)]\n    (swap! state assoc-in [:arc path :highlighted?] false)\n    (swap! state dissoc :dragging-path)))\n\n(defn setup-canvas []\n  (let [canvas-element (js/document.getElementById \"canvas\")\n        dpr (or js/window.devicePixelRatio 1)\n        canvas-rect (.getBoundingClientRect canvas-element)]\n    (set! (.-width canvas-element) (* dpr (.-width canvas-rect)))\n    (set! (.-height canvas-element) (* dpr (.-height canvas-rect)))\n\n    (.addEventListener canvas-element \"mousedown\" (partial on-mousedown canvas-rect))\n    (.addEventListener canvas-element \"mousemove\" (partial on-mousemove canvas-rect))\n    (.addEventListener canvas-element \"mouseup\" (partial on-mouseup canvas-rect))\n\n    (swap! state assoc :ctx (.getContext canvas-element \"2d\"))))\n\n(defn ^:dev/after-load start []\n  (rdom/render [main-view] (js/document.getElementById \"root\"))\n  (when-not (:ctx @state)\n    (setup-canvas)))\n\n(defn ^:export run []\n  (start))\n\n(run)\n"]}